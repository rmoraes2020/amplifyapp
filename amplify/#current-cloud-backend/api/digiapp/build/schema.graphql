type User {
  id: String!
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  deviceList: [String]
  createdAt: String
  updatedAt: AWSDateTime!
}

type Device {
  id: String!
  password: String
  userList: [String]
  status: String
  createdAt: String
  dueAt: String
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserFilterInput {
  id: ModelStringInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  email: ModelStringInput
  phoneNumber: ModelStringInput
  deviceList: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getDevice(id: ID!): Device
  listDevices(filter: ModelDeviceFilterInput, limit: Int, nextToken: String): ModelDeviceConnection
}

input CreateUserInput {
  id: String!
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  deviceList: [String]
  createdAt: String
}

input UpdateUserInput {
  id: String!
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  deviceList: [String]
  createdAt: String
}

input DeleteUserInput {
  id: ID
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createDevice(input: CreateDeviceInput!, condition: ModelDeviceConditionInput): Device
  updateDevice(input: UpdateDeviceInput!, condition: ModelDeviceConditionInput): Device
  deleteDevice(input: DeleteDeviceInput!, condition: ModelDeviceConditionInput): Device
}

input ModelUserConditionInput {
  firstName: ModelStringInput
  lastName: ModelStringInput
  email: ModelStringInput
  phoneNumber: ModelStringInput
  deviceList: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateDevice: Device @aws_subscribe(mutations: ["createDevice"])
  onUpdateDevice: Device @aws_subscribe(mutations: ["updateDevice"])
  onDeleteDevice: Device @aws_subscribe(mutations: ["deleteDevice"])
}

type ModelDeviceConnection {
  items: [Device]
  nextToken: String
}

input ModelDeviceFilterInput {
  id: ModelStringInput
  password: ModelStringInput
  userList: ModelStringInput
  status: ModelStringInput
  createdAt: ModelStringInput
  dueAt: ModelStringInput
  and: [ModelDeviceFilterInput]
  or: [ModelDeviceFilterInput]
  not: ModelDeviceFilterInput
}

input CreateDeviceInput {
  id: String!
  password: String
  userList: [String]
  status: String
  createdAt: String
  dueAt: String
}

input UpdateDeviceInput {
  id: String!
  password: String
  userList: [String]
  status: String
  createdAt: String
  dueAt: String
}

input DeleteDeviceInput {
  id: ID
}

input ModelDeviceConditionInput {
  password: ModelStringInput
  userList: ModelStringInput
  status: ModelStringInput
  createdAt: ModelStringInput
  dueAt: ModelStringInput
  and: [ModelDeviceConditionInput]
  or: [ModelDeviceConditionInput]
  not: ModelDeviceConditionInput
}
